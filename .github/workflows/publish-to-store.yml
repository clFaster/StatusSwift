name: Publish to Store

# Workflow triggers
on: 
  workflow_dispatch:
    inputs:
        release-type:
            type: choice
            description: Which type of release to create?
            required: true
            default: patch
            options: 
                - patch
                - minor
                - major

jobs:

  # Get Current Version and Bump it depending on the release-type input
  update-version:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    # - name: Ensure branch is main
    #   if: github.ref != 'refs/heads/main'
    #   run: |
    #     text="Publish a new version can only be done from the main branch."
    #     echo "::error::$text"
    #     exit 1

    - name: Read current version
      run: |
        echo "Current version: ${{ vars.VERSION }}"

    - name: Bump version
      id: bump_version
      run: |
        # Retrieve the increment type from the GitHub Actions input
        increment="${{ inputs.release-type }}"

        # Split the VERSION variable into its major, minor, and patch components
        IFS='.' read -r -a parts <<< "${{ vars.VERSION }}"

        # Check if the VERSION variable was split correctly
        if [ "${#parts[@]}" -ne 3 ]; then
        echo "Invalid version format"
        exit 1
        fi

        major=${parts[0]}
        minor=${parts[1]}
        patch=${parts[2]}

        # Increment the appropriate version component
        if [ "$increment" = "major" ]; then
        major=$((major + 1))
        minor=0
        patch=0
        elif [ "$increment" = "minor" ]; then
        minor=$((minor + 1))
        patch=0
        elif [ "$increment" = "patch" ]; then
        patch=$((patch + 1))
        else
        echo "Invalid increment type"
        exit 1
        fi

        # Construct the new version string
        new_version="$major.$minor.$patch"

        # Output the new version
        echo "New version: $new_version"

        # Set the output variable for GitHub Actions
        echo "new_version=$new_version" >> $GITHUB_OUTPUT

    - name: Update version var
      id: write_version
      env:
        GH_TOKEN: ${{ secrets.STATUS_SWIFT_WORKFLOW_UPDATE_VERSION }}
      run: |
        gh api \
        --method PATCH \
        -H "Accept: application/vnd.github+json" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        /repos/clFaster/StatusSwift/actions/variables/VERSION \
        -f "name=VERSION" -f "value=${{ steps.bump_version.outputs.new_version }}"

  # Build the app and publish artifact
  build-app:
    runs-on: windows-latest
    needs: update-version

    env:
      ProjectName: StatusSwift.csproj
      DotNetVersion: 8.0.x

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install .NET SDK ${{env.DotNetVersion}}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '${{env.DotNetVersion}}'

    - name: Install MAUI workload
      run: dotnet workload install maui-desktop wasm-tools

    - name: Update Version in manifest
      working-directory: './StatusSwift/Platforms/Windows'
      run: |
        $xmlFilePath = "Package.appxmanifest"
        [xml]$xml = Get-Content $xmlFilePath
        $newVersion = "${{ vars.VERSION }}.0"
        $xml.Package.Identity.Version = $newVersion
        $xml.Save($xmlFilePath)
        Write-Output "Version updated to $newVersion in $xmlFilePath"

    - name: .NET - Publish
      working-directory: './StatusSwift'
      run: dotnet publish ${{env.ProjectName}} -c Release -f net8.0-windows10.0.19041.0

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        path: .\**\*.msix

  # Publish the artifact to the Microsoft Store
  publish-artifact:
    runs-on: windows-latest
    needs: build-app

    steps:
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4

    - name: Move file to current folder
      id: find_file
      run: |
        pattern="StatusSwift.csproj_*.msix"
        found_file=$(find . -type f -name "$pattern" -print -quit)
        if [ -n "$found_file" ]; then
            echo "Found file: $found_file"
            echo "found_file=$found_file" >> $GITHUB_OUTPUT
        else
            echo "No file matching pattern '$pattern' found."
        fi

    - name: Setup Microsoft Store Developer CLI
      uses: microsoft/setup-msstore-cli@v1
    - name: Configure Microsoft Store Developer CLI
      run: |
        msstore reconfigure --tenantId ${{ secrets.AZURE_AD_APPLICATION_CLIENT_ID }} --sellerId ${{ secrets.PARTNER_CENTER_SELLER_ID }} --clientId ${{ secrets.AZURE_AD_APPLICATION_CLIENT_ID }} --clientSecret ${{ secrets.AZURE_AD_APPLICATION_SECRET }}
        msstore apps list
        msstore apps get ${{ secrets.STORE_APP_ID}}
        msstore submissions status ${{ secrets.STORE_APP_ID}}
        msstore publish -i $(dirname "${{ github.action.find_file.outputs.found_file }}") -id ${{ secrets.STORE_APP_ID}} -nc
